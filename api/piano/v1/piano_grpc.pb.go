// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PianoClient is the client API for Piano service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PianoClient interface {
	CreatePiano(ctx context.Context, in *CreatePianoRequest, opts ...grpc.CallOption) (*CreatePianoReply, error)
	UpdatePiano(ctx context.Context, in *UpdatePianoRequest, opts ...grpc.CallOption) (*UpdatePianoReply, error)
	DeletePiano(ctx context.Context, in *DeletePianoRequest, opts ...grpc.CallOption) (*DeletePianoReply, error)
	GetPiano(ctx context.Context, in *GetPianoRequest, opts ...grpc.CallOption) (*GetPianoReply, error)
	ListPiano(ctx context.Context, in *ListPianoRequest, opts ...grpc.CallOption) (*ListPianoReply, error)
}

type pianoClient struct {
	cc grpc.ClientConnInterface
}

func NewPianoClient(cc grpc.ClientConnInterface) PianoClient {
	return &pianoClient{cc}
}

func (c *pianoClient) CreatePiano(ctx context.Context, in *CreatePianoRequest, opts ...grpc.CallOption) (*CreatePianoReply, error) {
	out := new(CreatePianoReply)
	err := c.cc.Invoke(ctx, "/api.piano.v1.Piano/CreatePiano", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pianoClient) UpdatePiano(ctx context.Context, in *UpdatePianoRequest, opts ...grpc.CallOption) (*UpdatePianoReply, error) {
	out := new(UpdatePianoReply)
	err := c.cc.Invoke(ctx, "/api.piano.v1.Piano/UpdatePiano", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pianoClient) DeletePiano(ctx context.Context, in *DeletePianoRequest, opts ...grpc.CallOption) (*DeletePianoReply, error) {
	out := new(DeletePianoReply)
	err := c.cc.Invoke(ctx, "/api.piano.v1.Piano/DeletePiano", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pianoClient) GetPiano(ctx context.Context, in *GetPianoRequest, opts ...grpc.CallOption) (*GetPianoReply, error) {
	out := new(GetPianoReply)
	err := c.cc.Invoke(ctx, "/api.piano.v1.Piano/GetPiano", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pianoClient) ListPiano(ctx context.Context, in *ListPianoRequest, opts ...grpc.CallOption) (*ListPianoReply, error) {
	out := new(ListPianoReply)
	err := c.cc.Invoke(ctx, "/api.piano.v1.Piano/ListPiano", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PianoServer is the server API for Piano service.
// All implementations must embed UnimplementedPianoServer
// for forward compatibility
type PianoServer interface {
	CreatePiano(context.Context, *CreatePianoRequest) (*CreatePianoReply, error)
	UpdatePiano(context.Context, *UpdatePianoRequest) (*UpdatePianoReply, error)
	DeletePiano(context.Context, *DeletePianoRequest) (*DeletePianoReply, error)
	GetPiano(context.Context, *GetPianoRequest) (*GetPianoReply, error)
	ListPiano(context.Context, *ListPianoRequest) (*ListPianoReply, error)
	mustEmbedUnimplementedPianoServer()
}

// UnimplementedPianoServer must be embedded to have forward compatible implementations.
type UnimplementedPianoServer struct {
}

func (UnimplementedPianoServer) CreatePiano(context.Context, *CreatePianoRequest) (*CreatePianoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePiano not implemented")
}
func (UnimplementedPianoServer) UpdatePiano(context.Context, *UpdatePianoRequest) (*UpdatePianoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdatePiano not implemented")
}
func (UnimplementedPianoServer) DeletePiano(context.Context, *DeletePianoRequest) (*DeletePianoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePiano not implemented")
}
func (UnimplementedPianoServer) GetPiano(context.Context, *GetPianoRequest) (*GetPianoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPiano not implemented")
}
func (UnimplementedPianoServer) ListPiano(context.Context, *ListPianoRequest) (*ListPianoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPiano not implemented")
}
func (UnimplementedPianoServer) mustEmbedUnimplementedPianoServer() {}

// UnsafePianoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PianoServer will
// result in compilation errors.
type UnsafePianoServer interface {
	mustEmbedUnimplementedPianoServer()
}

func RegisterPianoServer(s grpc.ServiceRegistrar, srv PianoServer) {
	s.RegisterService(&Piano_ServiceDesc, srv)
}

func _Piano_CreatePiano_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePianoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PianoServer).CreatePiano(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.piano.v1.Piano/CreatePiano",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PianoServer).CreatePiano(ctx, req.(*CreatePianoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Piano_UpdatePiano_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdatePianoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PianoServer).UpdatePiano(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.piano.v1.Piano/UpdatePiano",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PianoServer).UpdatePiano(ctx, req.(*UpdatePianoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Piano_DeletePiano_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePianoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PianoServer).DeletePiano(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.piano.v1.Piano/DeletePiano",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PianoServer).DeletePiano(ctx, req.(*DeletePianoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Piano_GetPiano_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPianoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PianoServer).GetPiano(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.piano.v1.Piano/GetPiano",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PianoServer).GetPiano(ctx, req.(*GetPianoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Piano_ListPiano_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListPianoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PianoServer).ListPiano(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.piano.v1.Piano/ListPiano",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PianoServer).ListPiano(ctx, req.(*ListPianoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Piano_ServiceDesc is the grpc.ServiceDesc for Piano service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Piano_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.piano.v1.Piano",
	HandlerType: (*PianoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePiano",
			Handler:    _Piano_CreatePiano_Handler,
		},
		{
			MethodName: "UpdatePiano",
			Handler:    _Piano_UpdatePiano_Handler,
		},
		{
			MethodName: "DeletePiano",
			Handler:    _Piano_DeletePiano_Handler,
		},
		{
			MethodName: "GetPiano",
			Handler:    _Piano_GetPiano_Handler,
		},
		{
			MethodName: "ListPiano",
			Handler:    _Piano_ListPiano_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/piano/v1/piano.proto",
}
